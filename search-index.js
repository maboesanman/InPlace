var searchIndex = JSON.parse('{\
"in_place":{"doc":"A trait formulation of the Entry API, to make working with …","t":[0,0,0,0,0,0,3,6,3,6,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,6,3,6,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,16,16,4,8,4,8,8,16,16,8,8,8,8,13,13,16,8,8,8,8,8,16,13,13,16,8,16,16,11,11,11,11,11,11,11,11,11,10,11,10,10,10,11,10,11,10,10,10,10,11,11,11,10,11,11,11,10,11,10,10,11,10,11,11,11,10,11,11,11,10,10,11,11,11,11,10,11,11,11,11,11,11,11,11,11,12,12,12,12,12,8,8,8,8,8,16,16,16,16,16,10,11,11,10,10,10,10,11,11,11,11,11,11,10,0,0,3,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["dummy_collections","entry","get_entry","implementations","b_tree_map","hash_map","DummyBTreeMap","DummyBTreeMapEntry","DummyBTreeMapOccupiedEntry","DummyBTreeMapRawEntry","DummyBTreeMapRawVacantEntry","DummyBTreeMapVacantEntry","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","from","from","from","from","get_entry","get_entry_with_key","get_key","get_next_occupied","get_next_occupied","get_next_occupied","get_pair","get_pair_mut","get_prev_occupied","get_prev_occupied","get_prev_occupied","get_value","get_value_mut","into","into","into","into","into_key","into_pair","into_value_mut","occupy","occupy","recover_removed_entry","remove","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vacate","DummyHashMap","DummyHashMapEntry","DummyHashMapOccupiedEntry","DummyHashMapRawEntry","DummyHashMapRawVacantEntry","DummyHashMapVacantEntry","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","from","from","from","from","get_entry","get_entry_with_key","get_key","get_pair","get_pair_mut","get_value","get_value_mut","into","into","into","into","into_key","into_pair","into_value_mut","occupy","occupy","recover_removed_entry","remove","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vacate","BorrowedKey","Collection","Entry","EntryRemovableOccupiedEntry","EntryWithSearchKey","InsertableOccupiedEntry","IntoCollectionMut","Key","Key","KeyedOccupiedEntry","KeyedVacantEntry","NextOccupiedFromOccupied","NextOccupiedFromVacant","Occupied","Occupied","Occupied","OccupiedEntry","OccupiedEntryKeyMut","PrevOccupiedFromOccupied","PrevOccupiedFromVacant","RemovableOccupiedEntry","Removed","Vacant","Vacant","Vacant","VacantEntry","Value","Value","borrow","borrow","borrow_mut","borrow_mut","from","from","from","from_occupied","from_vacant","get_key","get_key","get_next_occupied","get_next_occupied","get_pair","get_pair","get_pair_mut","get_pair_mut","get_prev_occupied","get_prev_occupied","get_value","get_value_mut","insert","insert","insert_into_entry","insert_new","insert_new","into","into","into_collection_mut","into_collection_mut","into_key","into_pair","into_pair","into_value_mut","is_occupied","is_vacant","next_occupied","occupy","occupy","occupy_new","prev_occupied","recover_removed_entry","remove","remove_entry","remove_value","remove_value","remove_with_key","replace_key","replace_value","replace_value","try_from","try_from","try_into","try_into","type_id","type_id","vacate","0","0","0","0","1","GetEntryByIndex","GetEntryByKey","GetEntryFromKey","GetFirstEntry","GetLastEntry","Occupied","Occupied","Occupied","Occupied","Vacant","get_entry","get_entry_from_key","get_entry_from_key","get_entry_with_key","get_first_occupied","get_last_occupied","get_occupied","insert_into_entry","insert_into_entry","occupy","occupy","remove_entry","remove_entry","vacate","maybe_uninit","slice","MaybeUninitEntry","borrow","borrow_mut","from","get_value","get_value_mut","into","into_value_mut","occupy","recover_removed_entry","remove","try_from","try_into","type_id","OccupiedMutSliceEntry","borrow","borrow_mut","from","get_next_occupied","get_pair","get_pair_mut","get_prev_occupied","get_value","get_value_mut","into","into_collection_mut","into_pair","into_value_mut","try_from","try_into","type_id"],"q":["in_place","","","","in_place::dummy_collections","","in_place::dummy_collections::b_tree_map","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","in_place::dummy_collections::hash_map","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","in_place::entry","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","in_place::entry::Entry","","in_place::entry::EntryWithSearchKey","","","in_place::get_entry","","","","","","","","","","","","","","","","","","","","","","","","in_place::implementations","","in_place::implementations::maybe_uninit","","","","","","","","","","","","","","in_place::implementations::slice","","","","","","","","","","","","","","","",""],"d":["This module contains stubbed out examples of what this API …","This module allows you to manipulate entries you have …","This module allows you to aquire entries from collections.","This module contains implementations of traits on …","","","stand in for std::collections::BTreeMap","An entry of a BTreeMap. This is either …","Occupied entry of a BTreeMap.","A raw entry of a BTreeMap. This is either …","Raw vacant entry of a BTreeMap.","Vacant entry of a BTreeMap.","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","stand in for std::collections::HashMap","An entry of a HashMap. This is either …","Occupied entry of a HashMap.","A raw entry of a HashMap. This is either …","Raw vacant entry of a HashMap.","Vacant entry of a HashMap.","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","An entry which is either Occupied or Vacant.","A trait to represent recovering to an entry on removal.","","A trait to represent inserting a new entry on top of an …","","the type of the keys in the collection","","A trait to represent an occupied entry of a collection …","A vacant entry which has a key.","A trait to extend KeyedOccupiedEntry, allowing the user to …","A trait to extend KeyedOccupiedEntry, allowing the user to …","","","The type of OccupiedEntry we convert to when inserting.","A trait to represent an occupied entry of a collection.","A trait to extend OccupiedEntry, allowing the user to …","A trait to extend KeyedOccupiedEntry, allowing the user to …","A trait to extend KeyedOccupiedEntry, allowing the user to …","A trait to represent an OccupiedEntry that can be removed …","The type returned when removing the OccupiedEntry","","","","A vacant entry of a collection.","the type of the values in the collection","The type of values in the collection.","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Get a reference to the key an item will be inserted with.","","get the next occupied entry after this one.","get the next occupied entry after this one.","get the key value pair, immutably borrowed","","get the key value pair. the key is immutably borrowed, and …","","get the previous occupied entry after this one.","get the previous occupied entry after this one.","get the value, immutably borrowed.","get the value, mutably borrowed.","insert the <code>val</code> using the owned key.","insert the <code>val</code> using the owned key.","","insert a new element at this position, shifting the others …","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Consume self and return the contained key.","convert the entry into key value pair. the key is …","","convert the entry into a mutable to the value.","","","","insert the <code>val</code> using the owned key, returning the occupied …","set the value, returning the OccupiedEntry, and the …","","","","remove this entry from the collection, converting the entry","","remove this entry from the collection, consuming the entry …","remove this entry from the collection, consuming the entry …","","replace key with another one.","replace the value in the entry, returning the old value.","replace the value in the entry, returning the old value.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,4,1,2,3,4,1,2,3,4,1,1,3,2,3,4,2,2,2,3,4,2,2,1,2,3,4,3,2,2,3,4,2,2,1,2,3,4,1,2,3,4,1,2,3,4,1,0,0,0,0,0,0,5,6,7,8,5,6,7,8,5,6,7,8,5,5,7,6,6,6,6,5,6,7,8,7,6,6,7,8,6,6,5,6,7,8,5,6,7,8,5,6,7,8,5,9,10,0,0,0,0,0,9,11,0,0,0,0,12,13,14,0,0,0,0,0,15,12,13,16,0,17,14,12,13,12,13,12,12,13,12,12,11,12,18,19,9,12,9,12,20,21,17,17,14,14,12,22,12,12,13,10,12,11,9,12,17,12,12,12,14,12,12,12,16,15,12,15,15,12,23,17,17,12,13,12,13,12,13,12,24,25,26,27,26,0,0,0,0,0,28,29,30,31,28,32,28,28,28,29,30,31,28,28,28,28,32,32,32,0,0,0,33,33,33,33,33,33,33,33,33,33,33,33,33,0,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34],"f":[null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[]],[[]],[[]],[[]],[[["",0],["",0]],["entry",4]],[[["",0]],["entrywithsearchkey",4]],[[["",0]]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[["",0]]],[[["",0]]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[["",0]]],[[["",0]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["dummybtreemapentry",6]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0],["",0]]],null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[]],[[]],[[]],[[]],[[["",0],["",0]],["entry",4]],[[["",0]],["entrywithsearchkey",4]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["dummyhashmapentry",6]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0],["",0]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["entrywithsearchkey",4]]],[[]],[[]],[[]],[[]],[[["",0]]],[[["",0]]],[[],["option",4]],[[],["option",4]],[[["",0]]],[[["",0]],["result",4]],[[["",0]]],[[["",0]],["result",4]],[[],["option",4]],[[],["option",4]],[[["",0]]],[[["",0]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[],["option",4]],[[]],[[]],[[]],[[],["option",4]],[[],["entry",4]],[[]],[[]],[[]],[[]],[[]],[[["",0]],["result",4]],[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0],["",0]],["entry",4]],[[["",0]],["entry",4]],[[["",0]],["entry",4]],[[["",0]],["entrywithsearchkey",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0],["usize",0]],["option",4]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[]],[[["",0]]],[[["",0]]],[[]],[[]],[[]],[[],["entry",4]],[[]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,[[["",0]],["",0]],[[["",0]],["",0]],[[]],[[],["option",4]],[[["",0]]],[[["",0]]],[[],["option",4]],[[["",0]]],[[["",0]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]]],"p":[[3,"DummyBTreeMap"],[3,"DummyBTreeMapOccupiedEntry"],[3,"DummyBTreeMapVacantEntry"],[3,"DummyBTreeMapRawVacantEntry"],[3,"DummyHashMap"],[3,"DummyHashMapOccupiedEntry"],[3,"DummyHashMapVacantEntry"],[3,"DummyHashMapRawVacantEntry"],[8,"KeyedOccupiedEntry"],[8,"IntoCollectionMut"],[8,"KeyedVacantEntry"],[4,"Entry"],[4,"EntryWithSearchKey"],[8,"VacantEntry"],[8,"RemovableOccupiedEntry"],[8,"EntryRemovableOccupiedEntry"],[8,"OccupiedEntry"],[8,"NextOccupiedFromOccupied"],[8,"NextOccupiedFromVacant"],[8,"PrevOccupiedFromOccupied"],[8,"PrevOccupiedFromVacant"],[8,"InsertableOccupiedEntry"],[8,"OccupiedEntryKeyMut"],[13,"Occupied"],[13,"Vacant"],[13,"Occupied"],[13,"Vacant"],[8,"GetEntryFromKey"],[8,"GetFirstEntry"],[8,"GetLastEntry"],[8,"GetEntryByIndex"],[8,"GetEntryByKey"],[3,"MaybeUninitEntry"],[3,"OccupiedMutSliceEntry"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};